.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "JSON::RPC::Server::CGI 3"
.TH JSON::RPC::Server::CGI 3 "2008-02-24" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
JSON::RPC::Server::CGI \- JSON\-RPC sever for CGI
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\& # CGI version
\& #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& # In your CGI script
\& use JSON::RPC::Server::CGI;
\& 
\& my $server = JSON::RPC::Server::CGI\->new;
\&
\& $server\->dispatch(\*(AqMyApp\*(Aq)\->handle();
\& 
\& # or  an array ref setting
\& 
\& $server\->dispatch( [qw/MyApp MyApp::Subclass/] )\->handle();
\& 
\& # or a hash ref setting
\& 
\& $server\->dispatch( {\*(Aq/jsonrpc/API\*(Aq => \*(AqMyApp\*(Aq} )\->handle();
\& 
\& 
\& #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& # In your application class
\& package MyApp;
\& 
\& use base qw(JSON::RPC::Procedure); # Perl 5.6 or more than
\& 
\& sub echo : Public {    # new version style. called by clients
\&     # first argument is JSON::RPC::Server object.
\&     return $_[1];
\& }
\& 
\& sub sum : Public(a:num, b:num) { # sets value into object member a, b.
\&     my ($s, $obj) = @_;
\&     # return a scalar value or a hashref or an arryaref.
\&     return $obj\->{a} + $obj\->{b};
\& }
\& 
\& sub a_private_method : Private {
\&     # ... can\*(Aqt be called by client
\& }
\& 
\& sub sum_old_style {  # old version style. taken as Public
\&     my ($s, @arg) = @_;
\&    return $arg[0] + $arg[1];
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Gets a client request.
.PP
Parses its \s-1JSON\s0 data.
.PP
Passes the server object and the object decoded from the \s-1JSON\s0 data to your procedure (method).
.PP
Takes your returned value (scalar or arrayref or hashref).
.PP
Sends a response.
.PP
Well, you write your procedure code only.
.SH "METHODS"
.IX Header "METHODS"
They are inherited from the JSON::RPC::Server methods basically.
The below methods are implemented in JSON::RPC::Server::CGI.
.IP "new" 4
.IX Item "new"
Creates new JSON::RPC::Server::CGI object.
.IP "retrieve_json_from_post" 4
.IX Item "retrieve_json_from_post"
retrieves a \s-1JSON\s0 request from the body in \s-1POST\s0 method.
.IP "retrieve_json_from_get" 4
.IX Item "retrieve_json_from_get"
In the protocol v1.1, '\s-1GET\s0' request method is also allowable.
it retrieves a \s-1JSON\s0 request from the query string in \s-1GET\s0 method.
.IP "response" 4
.IX Item "response"
returns a response \s-1JSON\s0 data to a client.
.IP "cgi" 4
.IX Item "cgi"
returns the \s-1CGI\s0 object.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
JSON::RPC::Server,
.PP
JSON::RPC::Procedure,
.PP
\&\s-1JSON\s0,
.PP
<http://json\-rpc.org/wd/JSON\-RPC\-1\-1\-WD\-20060807.html>,
.PP
<http://json\-rpc.org/wiki/specification>,
.SH "AUTHOR"
.IX Header "AUTHOR"
Makamaka Hannyaharamitu, <makamaka[at]cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2007\-2008 by Makamaka Hannyaharamitu
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
