.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "JSON::RPC::Procedure 3"
.TH JSON::RPC::Procedure 3 "2007-12-18" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
JSON::RPC::Procedure \- JSON\-RPC Service attributes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& package MyApp;
\& 
\& use base (\*(AqJSON::RPC::Procedure\*(Aq);
\& 
\& sub sum : Public {
\&     my ($s, @arg) = @_;
\&     return $arg[0] + $arg[1];
\& }
\& 
\& # or 
\& 
\& sub sum : Public(a, b) {
\&     my ($s, $obj) = @_;
\&     return $obj\->{a} + $obj\->{b};
\& }
\& 
\& # or 
\& 
\& sub sum : Number(a:num, b:num) {
\&     my ($s, $obj) = @_;
\&     return $obj\->{a} + $obj\->{b};
\& }
\& 
\& # private method can\*(Aqt be called by clients
\& 
\& sub _foobar : Private {
\&     # ...
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Using this module, you can write a subroutine with a special attribute.
.PP
Currently, in below attributes, only Public and Private are available.
Others are same as Public.
.IP "Public" 4
.IX Item "Public"
Means that a client can call this procedure.
.IP "Private" 4
.IX Item "Private"
Means that a client can't call this procedure.
.IP "Arr" 4
.IX Item "Arr"
Means that its return values is an array object.
.IP "Obj" 4
.IX Item "Obj"
Means that its return values is a member object.
.IP "Bit" 4
.IX Item "Bit"
.PD 0
.IP "Bool" 4
.IX Item "Bool"
.PD
Means that a return values is a \f(CW\*(C`true\*(C'\fR or \f(CW\*(C`false\*(C'\fR.
.IP "Num" 4
.IX Item "Num"
Means that its return values is a number.
.IP "Str" 4
.IX Item "Str"
Means that its return values is a string.
.IP "Nil" 4
.IX Item "Nil"
.PD 0
.IP "None" 4
.IX Item "None"
.PD
Means that its return values is a \f(CW\*(C`null\*(C'\fR.
.SH "TODO"
.IX Header "TODO"
.IP "Auto Service Description" 4
.IX Item "Auto Service Description"
.PD 0
.IP "Type check" 4
.IX Item "Type check"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<http://json\-rpc.org/wd/JSON\-RPC\-1\-1\-WD\-20060807.html>
.SH "AUTHOR"
.IX Header "AUTHOR"
Makamaka Hannyaharamitu, <makamaka[at]cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2007 by Makamaka Hannyaharamitu
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
