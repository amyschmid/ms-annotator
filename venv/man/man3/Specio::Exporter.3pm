.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Specio::Exporter 3"
.TH Specio::Exporter 3 "2016-11-05" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Specio::Exporter \- Base class for type libraries
.SH "VERSION"
.IX Header "VERSION"
version 0.31
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    package MyApp::Type::Library;
\&
\&    use parent \*(AqSpecio::Exporter\*(Aq;
\&
\&    use Specio::Declare;
\&
\&    declare( ... );
\&
\&    # more types here
\&
\&    package MyApp::Foo;
\&
\&    use MyApp::Type::Library
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Inheriting from this package makes your package a type exporter. By default,
types defined in a package are never visible outside of the package. When you
inherit from this package, all the types you define internally become
available via exports.
.PP
The exported types are available through the importing package's \f(CW\*(C`t\*(C'\fR
subroutine.
.PP
By default, types your package imports are not re-exported:
.PP
.Vb 1
\&  package MyApp::Type::Library;
\&
\&  use parent \*(AqSpecio::Exporter\*(Aq;
\&
\&  use Specio::Declare;
\&  use Specio::Library::Builtins;
.Ve
.PP
In this case, the types provided by Specio::Library::Builtins are not
exported to packages which \f(CW\*(C`use MyApp::Type::Library\*(C'\fR.
.PP
You can explicitly ask for types to be re-exported:
.PP
.Vb 1
\&  package MyApp::Type::Library;
\&
\&  use parent \*(AqSpecio::Exporter\*(Aq;
\&
\&  use Specio::Declare;
\&  use Specio::Library::Builtins \-reexport;
.Ve
.PP
In this case, packages which \f(CW\*(C`use MyApp::Type::Library\*(C'\fR will get all the
types from Specio::Library::Builtins as well as any types defined in
\&\f(CW\*(C`MyApp::Type::Library\*(C'\fR.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs may be submitted through <https://github.com/houseabsolute/Specio/issues>.
.PP
I am also usually active on \s-1IRC\s0 as 'drolsky' on \f(CW\*(C`irc://irc.perl.org\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2016 by Dave Rolsky.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
