.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "JSON::RPC 3"
.TH JSON::RPC 3 "2008-02-24" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
JSON::RPC \- Perl implementation of JSON\-RPC 1.1 protocol
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 4
\& JSON\-RPC is a stateless and light\-weight remote procedure call (RPC)
\& protocol for inter\-networking applications over HTTP. It uses JSON
\& as the data format for of all facets of a remote procedure call,
\& including all application data carried in parameters.
.Ve
.PP
quoted from <http://json\-rpc.org/wd/JSON\-RPC\-1\-1\-WD\-20060807.html>.
.PP
This module was in \s-1JSON\s0 package on \s-1CPAN\s0 before.
Now its interfaces was completely changed.
.PP
The old modules \- JSONRPC::Transport::HTTP and Apache::JSONRPC are deprecated.
Please try to use JSON::RPC::Server and JSON::RPC::Client which support both JSON-RPC
protocol version 1.1 and 1.0.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
\&\s-1CGI\s0 version.
.PP
.Vb 3
\& #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& # In your application class
\& package MyApp;
\& 
\& use base qw(JSON::RPC::Procedure); # Perl 5.6 or more than
\& 
\& sub echo : Public {    # new version style. called by clients
\&     # first argument is JSON::RPC::Server object.
\&     return $_[1];
\& }
\& 
\& 
\& sub sum : Public(a:num, b:num) { # sets value into object member a, b.
\&     my ($s, $obj) = @_;
\&     # return a scalar value or a hashref or an arryaref.
\&     return $obj\->{a} + $obj\->{b};
\& }
\& 
\&  
\& sub a_private_method : Private {
\&     # ... can\*(Aqt be called by client
\& }
\& 
\& 
\& sub sum_old_style {  # old version style. taken as Public
\&     my ($s, @arg) = @_;
\&    return $arg[0] + $arg[1];
\& }
\& 
\& 
\& #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& # In your triger script.
\& use JSON::RPC::Server::CGI;
\& use MyApp;
\& 
\& # simple
\&  JSON::RPC::Server::CGI\->dispatch(\*(AqMyApp\*(Aq)\->handle();
\& 
\& # or 
\& JSON::RPC::Server::CGI\->dispatch([qw/MyApp FooBar/])\->handle();
\& 
\& # or INFO_PATH version
\& JSON::RPC::Server::CGI\->dispatch({\*(Aq/Test\*(Aq => \*(AqMyApp\*(Aq})\->handle();
\& 
\& #\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& # Client
\& use JSON::RPC::Client;
\& 
\& my $client = new JSON::RPC::Client;
\&
\& my $uri = \*(Aqhttp://www.example.com/jsonrpc/Test\*(Aq;
\& my $obj = {
\&    method  => \*(Aqsum\*(Aq, # or \*(AqMyApp.sum\*(Aq
\&    params  => [10, 20],
\& };
\& 
\& my $res = $client\->call( $uri, $obj )
\& 
\& if($res){
\&    if ($res\->is_error) {
\&        print "Error : ", $res\->error_message;
\&    }
\&    else {
\&        print $res\->result;
\&    }
\& }
\& else {
\&    print $client\->status_line;
\& }
\& 
\& # or
\& 
\& $client\->prepare($uri, [\*(Aqsum\*(Aq, \*(Aqecho\*(Aq]);
\& print $client\->sum(10, 23);
.Ve
.PP
See to JSON::RPC::Server::CGI, JSON::RPC::Server::Daemon, JSON::RPC::Server::Apache
JSON::RPC::Client and JSON::RPC::Procedure.
.SH "ABOUT NEW VERSION"
.IX Header "ABOUT NEW VERSION"
.IP "supports JSON-RPC protocol v1.1" 4
.IX Item "supports JSON-RPC protocol v1.1"
.SH "TODO"
.IX Header "TODO"
.PD 0
.IP "Document" 4
.IX Item "Document"
.IP "Examples" 4
.IX Item "Examples"
.IP "More Tests" 4
.IX Item "More Tests"
.PD
.SH "AUTHOR"
.IX Header "AUTHOR"
Makamaka Hannyaharamitu, <makamaka[at]cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2007\-2008 by Makamaka Hannyaharamitu
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
